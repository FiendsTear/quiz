// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Quiz {
    id            Int        @id @unique @default(autoincrement())
    name          String
    userId        String?
    user          User?      @relation(fields: [userId], references: [id])
    isPublished   Boolean    @default(false)
    isPrivate     Boolean    @default(false)
    tags          Tag[]
    questions     Question[]
    ratings       Rating[]
    ratings_avg   Float      @default(0)
    ratings_count Int        @default(0)
    Game          Game[]
}

model Rating {
    id     Int      @id @unique @default(autoincrement())
    quizId Int
    quiz   Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
    userId String
    user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    value  Int
    date   DateTime @default(now())

    @@unique([userId, quizId])
}

model Question {
    id                  Int      @id @unique @default(autoincrement())
    body                String?
    quiz                Quiz     @relation(fields: [quizID], references: [id], onDelete: Cascade)
    quizID              Int
    order               Int
    answerWeight        Float    @default(1)
    answers             Answer[]
    answerDescription   String?
}

model Answer {
    id         Int      @id @unique @default(autoincrement())
    body       String?
    order      Int
    isCorrect  Boolean  @default(false)
    question   Question @relation(fields: [questionID], references: [id], onDelete: Cascade)
    questionID Int
}

model Game {
    id      Int    @id @unique @default(autoincrement())
    quiz    Quiz   @relation(fields: [quizID], references: [id], onDelete: Cascade)
    quizID  Int
    players User[]
}

model Tag {
    id      Int    @id @unique @default(autoincrement())
    name    String @unique
    quizzes Quiz[]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    quizzes       Quiz[]
    ratings       Rating[]
    games         Game[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
